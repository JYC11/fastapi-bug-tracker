"""initial tables

Revision ID: 8c338beb037c
Revises:
Create Date: 2023-02-25 10:42:00.371289

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "8c338beb037c"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bug_tracker_event_store",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "create_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("aggregate_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("event_name", sa.String(length=255), nullable=False),
        sa.Column("event_data", sa.JSON(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_bug_tracker_event_store_aggregate_id"),
        "bug_tracker_event_store",
        ["aggregate_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bug_tracker_event_store_id"),
        "bug_tracker_event_store",
        ["id"],
        unique=False,
    )
    op.create_table(
        "bug_tracker_tags",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "create_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "update_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_bug_tracker_tags_id"), "bug_tracker_tags", ["id"], unique=False
    )
    op.create_table(
        "bug_tracker_users",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "create_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "update_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("username", sa.String(length=100), nullable=False),
        sa.Column("email", sa.String(length=100), nullable=False),
        sa.Column("password", sa.Text(), nullable=False),
        sa.Column("user_type", sa.String(length=50), nullable=False),
        sa.Column("user_status", sa.String(length=50), nullable=False),
        sa.Column("is_admin", sa.Boolean(), nullable=True),
        sa.Column("security_question", sa.Text(), nullable=False),
        sa.Column("security_question_answer", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_bug_tracker_users_id"), "bug_tracker_users", ["id"], unique=False
    )
    op.create_table(
        "bug_tracker_bugs",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "create_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "update_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("title", sa.String(length=50), nullable=False),
        sa.Column("author_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("assigned_user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("edited", sa.Boolean(), nullable=True),
        sa.Column("images", sa.ARRAY(sa.String(length=255)), nullable=True),
        sa.Column("urgency", sa.String(length=50), nullable=False),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("record_status", sa.String(length=50), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["assigned_user_id"], ["bug_tracker_users.id"], ondelete="cascade"
        ),
        sa.ForeignKeyConstraint(
            ["author_id"], ["bug_tracker_users.id"], ondelete="cascade"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_bug_tracker_bugs_assigned_user_id"),
        "bug_tracker_bugs",
        ["assigned_user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bug_tracker_bugs_author_id"),
        "bug_tracker_bugs",
        ["author_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bug_tracker_bugs_id"), "bug_tracker_bugs", ["id"], unique=False
    )
    op.create_table(
        "bug_tracker_bug_tag",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "create_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "update_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("tag_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("bug_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["bug_id"], ["bug_tracker_bugs.id"], ondelete="cascade"
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"], ["bug_tracker_tags.id"], ondelete="cascade"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_bug_tracker_bug_tag_bug_id"),
        "bug_tracker_bug_tag",
        ["bug_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bug_tracker_bug_tag_id"), "bug_tracker_bug_tag", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_bug_tracker_bug_tag_tag_id"),
        "bug_tracker_bug_tag",
        ["tag_id"],
        unique=False,
    )
    op.create_table(
        "bug_tracker_comments",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "create_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "update_dt",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("bug_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("author_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column("vote_count", sa.Integer(), nullable=False),
        sa.Column("edited", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["bug_tracker_users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["bug_id"],
            ["bug_tracker_bugs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_bug_tracker_comments_author_id"),
        "bug_tracker_comments",
        ["author_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bug_tracker_comments_bug_id"),
        "bug_tracker_comments",
        ["bug_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_bug_tracker_comments_id"), "bug_tracker_comments", ["id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_bug_tracker_comments_id"), table_name="bug_tracker_comments")
    op.drop_index(
        op.f("ix_bug_tracker_comments_bug_id"), table_name="bug_tracker_comments"
    )
    op.drop_index(
        op.f("ix_bug_tracker_comments_author_id"), table_name="bug_tracker_comments"
    )
    op.drop_table("bug_tracker_comments")
    op.drop_index(
        op.f("ix_bug_tracker_bug_tag_tag_id"), table_name="bug_tracker_bug_tag"
    )
    op.drop_index(op.f("ix_bug_tracker_bug_tag_id"), table_name="bug_tracker_bug_tag")
    op.drop_index(
        op.f("ix_bug_tracker_bug_tag_bug_id"), table_name="bug_tracker_bug_tag"
    )
    op.drop_table("bug_tracker_bug_tag")
    op.drop_index(op.f("ix_bug_tracker_bugs_id"), table_name="bug_tracker_bugs")
    op.drop_index(op.f("ix_bug_tracker_bugs_author_id"), table_name="bug_tracker_bugs")
    op.drop_index(
        op.f("ix_bug_tracker_bugs_assigned_user_id"), table_name="bug_tracker_bugs"
    )
    op.drop_table("bug_tracker_bugs")
    op.drop_index(op.f("ix_bug_tracker_users_id"), table_name="bug_tracker_users")
    op.drop_table("bug_tracker_users")
    op.drop_index(op.f("ix_bug_tracker_tags_id"), table_name="bug_tracker_tags")
    op.drop_table("bug_tracker_tags")
    op.drop_index(
        op.f("ix_bug_tracker_event_store_id"), table_name="bug_tracker_event_store"
    )
    op.drop_index(
        op.f("ix_bug_tracker_event_store_aggregate_id"),
        table_name="bug_tracker_event_store",
    )
    op.drop_table("bug_tracker_event_store")
    # ### end Alembic commands ###
